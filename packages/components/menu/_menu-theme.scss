@use '@xm-ngx/styles/src/scroll';

$xm-menu-item-hover:        linear-gradient(0deg, rgba(196, 199, 197, .08), rgba(196, 199, 197, .08)) !default;
$xm-menu-item-active:       0 4px 20px 0 rgba(246, 126, 126, 0.14), 0 7px 10px -5px rgba(#000, 0.4) !default;
$xm-menu-list-padding-left: 0 !default;
$xm-menu-icon-font-size:    20px !default;

@mixin xm-menu-link-theme($theme) {
  cursor: pointer;

  $xm-primary: map-get($theme, primary);
  $xm-menu-item-active-color: map-get($theme, sidebar-text-active-color) or $xm-primary;

  &.expanded {
    background: $xm-menu-item-hover;
    @include is-enable-rounded();
  }

  &:active {
    background: $xm-menu-item-hover;
    @include is-enable-rounded();
  }

  &.active {
    outline:    0;
    color:      $xm-menu-item-active-color;
    background: $xm-menu-item-hover;
  }

  &.active-with-stretch {
    position:   relative;
    outline:    0;
    color:      $xm-menu-item-active-color;
    background: $xm-menu-item-hover;

    &:after {
      content: '';
      position: absolute;
      left: 0;
      right: 0;
      height: 100%;
      width: 100%;
      margin: 0 auto;
      background: rgba($xm-menu-item-active-color, .3);
      border-radius: 24px;
      animation: stretch-background 250ms;
    }
  }

  &:hover:not(.active),
  &:focus:not(.active) {
    background: $xm-menu-item-hover;
    color:      $xm-menu-item-active-color;
    @include is-enable-rounded();
  }

  &:focus,
  &.focus {
    outline:    0;
    background: $xm-menu-item-hover;
  }

  &.active-menu-category {
    outline:    0;
    color:      $xm-menu-item-active-color;
    background: $xm-menu-item-hover;
  }
}

@mixin xm-menu-theme($theme) {

  $xm-primary: map-get($theme, primary);
  $xm-menu-item-active-color: map-get($theme, sidebar-text-active-color) or $xm-primary;
  $xm-sidebar-background: map-get($theme, sidebar-background) or transparent;
  $xm-sidebar-width: map-get($theme, sidebar-width-m3) or 256px;

  .menu-view {
    display: flex;
    min-width: $xm-sidebar-width;
    max-width: $xm-sidebar-width;
    background-color: $xm-sidebar-background;

    cdk-tree {
      width: 100%;
      height: calc(100vh - 16px);
      overflow-y: auto;
      margin: 8px 0 8px;
      @include xm-scrollbar();
    }
  }

  .old-menu {
    height: 100%;
    border-radius: 0;
    width: 100%;
    max-width: none;

    cdk-tree {
      height: 100%;
      margin: 0;
    }
  }

  .menu-title {

    &.expanded {
      background: $xm-menu-item-hover;
      @include is-enable-rounded();
    }
  }

  .menu-list {
    list-style-type: none;
    overflow:        hidden;
    // TODO: override default ul styles
    padding-left:    $xm-menu-list-padding-left;
    margin-bottom:   0;

    &.collapsed {
      overflow: hidden;
      // TODO: override default ul styles
      margin:   0;
    }
  }

  .nested-menu-list {
    padding: 0 2px 0 18px;
    width: 100%;
    max-width: 100%;
  }

  .mat-expansion-indicator {
    margin-right: $xm-sidebar-padding-x;
    margin-left:  auto;

    &::after {
      @include xm-mat-expansion-indicator();
    }
  }

  .menu-link {
    overflow:       hidden;
    white-space:    nowrap;
    display:        flex;
    flex-direction: row;
    align-items:    center;
    color:          inherit;
    padding:        $xm-sidebar-menu-item-padding-y $xm-sidebar-padding-x $xm-sidebar-menu-item-padding-y $xm-sidebar-padding-x * 2;;


    &:not(.active) > .mat-icon {
      color: inherit;
    }

    & > .xm-menu-item-text {
      padding-left:  $xm-sidebar-padding-x;
      overflow:      hidden;
      text-overflow: ellipsis;
    }

    &-icon {
      margin: 0 8px 0 16px;
    }

    @include xm-menu-link-theme($theme);
  }

  .rounded-menu-link {
    margin: 2px 8px;
    border-radius: 24px;
    padding: $xm-sidebar-menu-item-padding-y $xm-sidebar-padding-x;
  }

  .menu-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: $xm-menu-icon-font-size;
    /** fix bug of side bar mini */
    min-width: 24px;
  }

}

@keyframes stretch-background {
  0% {
    transform: scale(0.5, 1);
  }
  100% {
    transform: scale(1, 1);
  }
}
